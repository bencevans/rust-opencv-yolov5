name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  build:

    strategy:
      matrix:
        os:
          - image: ubuntu-20.04
            family: linux
            triplet: x64-linux
            cuda: false
          - image: macos-11
            family: osx
            triplet: x64-osx
            cuda: false
          - image: windows-2022
            family: windows
            triplet: x64-windows-static-md
            cuda: false
          - image: windows-2022
            family: windows
            triplet: x64-windows-static-md
            cuda: true

    runs-on: ${{ matrix.os.image }}

    steps:

    - name: Install Linux System Dependencies
      run: sudo apt-get update && sudo apt-get install -y libdbus-1-3 libdbus-1-dev libxi-dev libxtst-dev libgles2-mesa-dev libgtk-3-dev
      if: runner.os == 'Linux'

    - name: Install Windows System Dependencies
      run: choco install -y wget
      if: runner.os == 'Windows'

    - name: Install CUDA
      uses: Jimver/cuda-toolkit@v0.2.8
      id: cuda-toolkit
      with:
        cuda: '11.7.0'
        method: 'network'
        use-github-cache: false
      if: matrix.os.cuda == true
    
    # https://github.com/mlverse/torchvisionlib/blob/main/.github/workflows/R-CMD-check.yaml
    - name: Install cuDNN
      if: ${{ matrix.os.cuda == true && runner.os == 'Windows' }}
      shell: powershell
      run: |
          wget "https://storage.googleapis.com/torch-lantern-builds/cudnn/cudnn-11.3-windows-x64-v8.2.1.32.zip" -O cudnn.zip
          Expand-Archive -Path cudnn.zip -DestinationPath "C:\cudnn"
          Get-ChildItem -Path "C:\cudnn"
          Get-ChildItem -Path "${env:CUDA_PATH}"
          Move-Item -Path "C:\cudnn\cuda\bin\cudnn*.dll" -Destination "${env:CUDA_PATH}\bin"
          Move-Item -Path "C:\cudnn\cuda\include\cudnn*.h" -Destination "${env:CUDA_PATH}\include"
          Move-Item -Path "C:\cudnn\cuda\lib\x64\cudnn*.lib" -Destination "${env:CUDA_PATH}\lib\x64"
          echo "CUDNN_INCLUDE_PATH=""${CUDA_PATH}\include""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDNN_LIBRARY_PATH=""${CUDA_PATH}\lib\x64""" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    

    - name: Setup Rust Toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set VCPKG_ROOT
      run: echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.VCPKG_ROOT }}/installed
          ${{ env.VCPKG_ROOT }}/packages
        key: ${{ matrix.os.image }}-vcpkg-opencv4[dnn]-${{ matrix.os.triplet }}-${{ matrix.os.cuda }}
        restore-keys: |
          ${{ matrix.os.image }}-vcpkg-opencv4[dnn]-${{ matrix.os.triplet }}-false

    - name: Build OpenCV
      run: vcpkg install opencv4[dnn]:${{ matrix.os.triplet }}
      if: matrix.os.cuda == false

    - name: Build OpenCV with CUDA
      run: vcpkg install opencv4[dnn,cudnn]:${{ matrix.os.triplet }}
      if: matrix.os.cuda == true

    - name: Cache Rust
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --verbose

    - name: Download Model
      run: wget -q https://github.com/bencevans/megadetector-onnx/releases/download/v0.1.0/md_v5a.0.0-640x640.onnx

    - name: Run tests
      run: cargo test --verbose
